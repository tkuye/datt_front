{"version":3,"sources":["components/Admin/QuillComponent.tsx","components/Admin/AdminPost.tsx","components/Admin/Home.tsx"],"names":["QuillToolBar","id","style","width","className","value","toolbarModules","toolbar","AdminPost","useState","showDate","setShowDate","title","setTitle","date","setDate","text","setText","currentSelection","setCurrentSelection","fails","setFails","fileEl","useRef","image","setImage","fileType","setFileType","iframeForm","setIframeForm","upcoming","setUpcoming","runningCont","useContext","RunningContext","textAlign","onClick","e","document","getElementById","checked","htmlFor","type","name","onChange","target","console","log","display","reader","FileReader","files","onloadend","previewImage","src","result","readAsDataURL","getImage","ref","modules","height","paddingRight","content","color","padding","marginTop","marginBottom","current","click","alt","getCookie","axios","post","tblname","Date","toISOString","iframe","split","then","response","optionsImage","headers","Promise","all","Axios","put","data","running","Home","Consumer"],"mappings":"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","file":"static/js/12.0166307f.chunk.js","sourcesContent":["import React from 'react'\n\nimport 'react-quill/dist/quill.snow.css';\ninterface QuillToolBarProps {\n  \n}\n\n\nconst QuillToolBar: React.FC<QuillToolBarProps> = ({}) => {\n        return (<div id=\"standalone-container\">\n        <div id=\"toolbar-container\"  style={{width:'95%'}}>\n          <span className=\"ql-formats\">\n            <select className=\"ql-size\"></select>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-bold\"></button>\n            <button className=\"ql-italic\"></button>\n            <button className=\"ql-underline\"></button>\n            <button className=\"ql-strike\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <select className=\"ql-color\"></select>\n            <select className=\"ql-background\"></select>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-script\" value=\"sub\"></button>\n            <button className=\"ql-script\" value=\"super\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-header\" value=\"1\"></button>\n            <button className=\"ql-header\" value=\"2\"></button>\n            <button className=\"ql-blockquote\"></button>\n            <button className=\"ql-code-block\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-list\" value=\"ordered\"></button>\n            <button className=\"ql-list\" value=\"bullet\"></button>\n            <button className=\"ql-indent\" value=\"-1\"></button>\n            <button className=\"ql-indent\" value=\"+1\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-direction\" value=\"rtl\"></button>\n            <select className=\"ql-align\"></select>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-link\"></button>\n            <button className=\"ql-image\"></button>\n      \n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-clean\"></button>\n          </span>\n        </div>\n        <div id=\"editor-container\"></div>\n        \n      </div>);\n}\nexport default QuillToolBar","import React, {useState, useRef, useContext, useMemo} from 'react'\nimport axios from '../../axInstance'\nimport Axios from 'axios'\nimport Home from './Home'\nimport {RunningContext} from './AdminPanel'\nimport getCookie from '../../getCookie'\nimport ReactQuill from 'react-quill';\nimport QuillComponent from './QuillComponent'\n\n\ninterface AdminPostProps {\n\n}\nconst styles = {\n    root: {\n      fontFamily: '\\'Helvetica\\', sans-serif',\n      padding: 20,\n      width: 600,\n    },\n    editor: {\n      border: '1px solid #ccc',\n      cursor: 'text',\n      minHeight: 80,\n      padding: 10,\n    },\n    button: {\n      marginTop: 10,\n      textAlign: 'center',\n    },\n  };\n  \n\n  const toolbarModules =  {\n    toolbar:'#toolbar-container'\n  }\n\nconst AdminPost: React.FC<AdminPostProps> = () => {\n\n        \n        const [showDate, setShowDate] = useState(true)\n        const [title, setTitle] = useState(\"\")\n        const [date, setDate] = useState<any>(\"\")\n        const [text, setText] = useState(\"\")\n        const [currentSelection, setCurrentSelection] = useState(\"\")\n        const [fails, setFails] = useState(\"\")\n        const fileEl = useRef<any>('')\n        const [image, setImage] = useState<any>('')\n        const [fileType, setFileType] = useState('')\n        const [iframeForm, setIframeForm] = useState<any>('')\n        const [upcoming, setUpcoming] = useState(false)\n        const runningCont = useContext(RunningContext)\n\n        const inputCheckBlog = (e:any) => {\n            let blogs =  document.getElementById('blogs') as HTMLInputElement\n           blogs.checked = true\n               setCurrentSelection(\"blogs\")\n               setFails(\"\")\n               setShowDate(false)\n        }\n\n        const inputCheckEvents = (e:any) => {\n           let events =  document.getElementById('events') as HTMLInputElement\n           events.checked = true\n            setCurrentSelection(\"events\")\n            setFails(\"\")\n            setShowDate(true)\n     }\n            \n     const clickButton = () => {\n        fileEl.current.click();\n    }   \n\n    const getImage = (e:any, id:string) => {\n      console.log(text)\n        var reader = new FileReader();\n        setFileType(e.target.files[0].type)\n       setImage(e.target.files[0]);\n       console.log(e.target.files[0])\n        reader.onloadend = (e) => {\n            let previewImage = document.getElementById(id) as HTMLImageElement\n            previewImage.src = reader.result as string \n            previewImage.style.display = 'block'\n            \n            \n        }\n        reader.readAsDataURL(e.target.files[0])\n}   \n    \n    \n            \n        \n        const formSubmit = (e:any) => {\n            \n            if (!currentSelection) {\n                setFails(\"You must select an option before submitting.\")\n                return\n            }\n            console.log(text)\n            let id = getCookie('userid')\n\n            axios.post('/post', {\n                tblname:currentSelection,\n                title, \n                type:fileType,\n                date:new Date().toISOString(), \n                id:id,\n                iframe:iframeForm !== \"\"?iframeForm.split(\"?\")[0] + \"?embedded=true\":\"\",\n                upcoming:upcoming\n            }).then(response => {\n                console.log(response)\n                const options = {\n                  headers: {\n                    \"Content-type\":\"text/html; charset=UTF-8\"\n                  }\n                  \n                }\n                const optionsImage = {\n                  headers: {\n                    \"Content-type\":fileType\n                  }\n                  \n                }\n                \n               Promise.all([Axios.put(response.data[0]?.text, text, options), Axios.put(response.data[1]?.image, image, optionsImage)]).then(() => {\n                 runningCont.running()\n               })\n            \n        })\n      }\n        const changeEdit = (e:any) => {\n            console.log(e)\n        }\n       \n        \n           \n        \n        return (<div>\n            <Home />\n            <div id=\"type\" >\n            <h2 style={{textAlign: 'center'}}>Choose the type of post.</h2> \n                <div id=\"post-type\" >\n                <div onClick={(e) => inputCheckEvents(e)} className=\"events\">\n                <label htmlFor=\"events\">Event</label>\n                <input type=\"radio\" name=\"tbl\" id=\"events\" />\n                </div>\n                <div onClick={(e) => inputCheckBlog(e)} className=\"blogs\">\n                <label htmlFor=\"blogs\" >Blog</label>\n                <input type=\"radio\" name=\"tbl\" id=\"blogs\"/>\n                </div>\n                </div>\n                <label htmlFor=\"title\"><h2>Title</h2></label>\n                <input type=\"text\"  name=\"title\" id=\"title\" value={title} onChange={(e) => {setTitle(e.target.value)}}/>\n                \n                {showDate?<div><h2>Check the box if it's an upcoming event.</h2><input type=\"checkbox\" name=\"upcoming\" onChange={(e) => {setUpcoming(e.target.checked);console.log(e.target.checked)}} /></div>:null}\n                {showDate?<div><label htmlFor=\"date\"><h2>Date</h2></label>\n                <input type=\"date\"  name=\"date\" id=\"date\" value={date} onChange={(e) => {setDate(e.target.value)}}/></div>:<div></div>}\n                <h3>Put the form link here. (If it Exists)</h3>\n                <input type=\"text\" name=\"iframe\" value={iframeForm} onChange={(e) => setIframeForm(e.target.value)}/>\n                <label htmlFor=\"details\"><h2>Create Your Post Here</h2></label>\n                <input type=\"file\" name=\"image\" style={{display:'none'}}id=\"image\" onChange={(e) => getImage(e, 'detail-photo')} ref={fileEl}/>\n                <QuillComponent />\n                <ReactQuill  modules={toolbarModules} style={{width:\"95%\", height:\"100%\", paddingRight:\"12px\"}} value={text}  onChange={(content) => setText(content)}/>\n                <div><button style={{color: 'black', width:'fit-content', padding:\"10px\", marginTop:\"20px\", marginBottom:\"20px\"}} onClick={clickButton}>Upload Your Image</button><br /></div>\n                <img src=\"\" alt=\"preview\" id=\"detail-photo\" style={{display:'none'}}/>\n                <input type=\"submit\" id=\"submit\" value=\"Create Post\" onClick={formSubmit}/>\n                <h3>{fails}</h3>\n\n            </div>\n            \n        </div>);\n\n}\n\nexport default AdminPost\n//   <textarea  name=\"details\" id=\"details\" value={details} onChange={(e) => {setDetails(e.target.value)}}/>\n","import React from 'react'\nimport {RunningContext} from './AdminPanel'\ninterface HomeProps {\n\n}\n\nconst Home: React.FC<HomeProps> = () => {\n\n        return (<div>\n                <RunningContext.Consumer >\n                    {(value:any) => {\n                        return (\n                        <h3 onClick ={() => value.running()} id=\"home\">Go Home</h3>\n                        )}}\n            \n            </RunningContext.Consumer>\n        </div>);\n}\nexport default Home"],"sourceRoot":""}