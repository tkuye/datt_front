{"version":3,"sources":["components/Admin/NewUser.tsx","components/Admin/UserShow.tsx","components/Admin/Home.tsx"],"names":["NewUser","useState","username","setUsername","password","setPassword","existing","setExisting","rePassword","setRePassword","totalTrue","setTotalTrue","passwordVal","useRef","ourContext","useContext","RunningContext","Home","id","onSubmit","e","preventDefault","axios","post","then","response","data","newUser","running","onChange","valDiv","document","getElementById","Array","from","children","every","child","classList","contains","style","borderColor","htmlFor","type","value","autoComplete","target","onBlur","className","name","length","replace","myString","String","split","forEach","char","toUpperCase","isNaN","Number","test","checkPasswords","onFocus","current","display","checkRePasswords","ref","UserShow","getNewUser","onClick","Consumer"],"mappings":"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","file":"static/js/17.352b4b86.chunk.js","sourcesContent":["import React, {useState, useRef, useContext} from 'react'\nimport axios from '../../axInstance'\nimport Home from './Home'\nimport {RunningContext} from './AdminPanel'\ninterface NewUserProps {\n   \n}\n\nconst NewUser: React.FC<NewUserProps> = () => {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [existing, setExisting] = useState('')\n    const [rePassword, setRePassword] = useState('')\n    const [totalTrue, setTotalTrue] = useState(false)\n    const passwordVal = useRef<any>('')\n    const ourContext = useContext(RunningContext)\n\n    const checkUsername = () => {\n        axios.post('/existing-user', {\n            username: username\n        }).then((response) => {\n            if (response.data) {\n                setExisting('There is already a user with that username.')\n            }\n            else {\n                setExisting('')\n            }\n        })\n    }\n\n    const checkPasswords = (e:any) => {\n\n        function hasNumber(myString:string) {\n            return /\\d/.test(myString);\n          }\n\n        if (e.target.value.length >= 8) {\n            document.getElementById('charlen')?.classList.replace('errors', 'success')\n            \n        }\n        else if (e.target.value.length < 8) {\n            document.getElementById('charlen')?.classList.replace('success', 'errors')\n        }\n        let contains = false\n        String(e.target.value).split('').forEach(char => {\n            if (char.toUpperCase() === char && isNaN(Number(char))) {\n                contains = true\n            } \n        })\n         if (contains){\n        document.getElementById('charcase')?.classList.replace('errors', 'success')\n         }\n         else {\n            document.getElementById('charcase')?.classList.replace('success', 'errors')\n        }\n\n        \n          if (hasNumber(e.target.value)) {\n            document.getElementById('charnum')?.classList.replace('errors', 'success')\n          } else {\n            document.getElementById('charnum')?.classList.replace('success', 'errors')\n          }\n          if (e.target.value === rePassword) {\n            document.getElementById('charmatch')?.classList.replace('errors', 'success')\n          }\n          else {\n            document.getElementById('charmatch')?.classList.replace('success', 'errors')\n          }\n          \n        \n    }\n    const checkRePasswords = (e:any) => {\n        if (e.target.value === password) {\n            document.getElementById('charmatch')?.classList.replace('errors', 'success')\n          }\n          else {\n            document.getElementById('charmatch')?.classList.replace('success', 'errors')\n          }\n    }\n\n    const formSubmission = (e:any) => {\n        e.preventDefault()\n        if (!totalTrue || existing !== \"\" || password === \"\" || username === \"\" ) return\n\n        axios.post('/new-user', {\n            username: username,\n            password: password\n\n        }).then(response => {\n            if (response.data === \"success\") {\n                ourContext.newUser(`User ${username} Created.`)\n                ourContext.running()\n            }\n        })\n    }\n\n    const allClass = () => {\n        let valDiv = document.getElementById('password-validation') as HTMLDivElement\n\n        if (Array.from(valDiv.children).every(child => child.classList.contains('success'))) {\n            valDiv.style.borderColor = 'rgb(27, 141, 46)'\n            setTotalTrue(true)\n            \n        }\n        else {\n            valDiv.style.borderColor = 'rgb(202, 32, 32)'\n            setTotalTrue(false)\n        }\n    }\n    \n        return (<div>\n            <Home />\n        <div id=\"new-user\">\n            \n            <form onSubmit={formSubmission} onChange={allClass}>\n            <label htmlFor=\"username\"><h2>Enter a Username</h2></label>\n\n            <input type=\"text\" id=\"username\" value={username}  autoComplete=\"username\"\n            onChange={e => {setUsername(e.target.value)}}\n\n           onBlur={checkUsername}/>\n           <div className=\"errors\">{existing}</div>\n            <label htmlFor=\"password\"><h2>Enter a Password</h2></label>\n            <input type=\"password\" \n            name=\"password\"  autoComplete=\"new-password\" \n            onChange={e => {setPassword(e.target.value);checkPasswords(e)}}\n            onFocus={ () => passwordVal.current.style.display = \"block\"}\n            />\n            <label htmlFor=\"re-type\"><h2>Confirm Password</h2></label>\n            <input type=\"password\" name=\"re-password\" id=\"re-type\" autoComplete=\"new-password\" onChange={e => {setRePassword(e.target.value);checkRePasswords(e)}}/>\n            \n            <input type=\"submit\" id=\"submit\"value=\"Create New User\"/>\n\n    <div id=\"password-validation\" ref={passwordVal} style={{display:'none'}}>\n        <p className=\"errors\" id=\"charlen\">Password must be at least 8 characters.</p>\n        <p className=\"errors\" id=\"charcase\"> Password must have an upper case character.</p>\n        <p className=\"errors\" id=\"charnum\">Password must contain a number.</p>\n        <p className=\"errors\" id=\"charmatch\">Passwords must match.</p>\n    </div>\n            </form>\n        </div>\n        \n        </div>);\n\n}\nexport default NewUser","import React from 'react'\nimport NewUser from './NewUser'\n\n\ninterface UserShowProps {\n    getNewUser:(components:JSX.Element) => void\n}\n\nconst UserShow: React.FC<UserShowProps> = ({getNewUser}) => {\n    const goNewUser = () => {\n        getNewUser(<NewUser />)\n    }\n        return (<div onClick={goNewUser} className=\"user-admin\">\n            <h2>Create a New User</h2>\n        </div>);\n}\nexport default UserShow","import React from 'react'\nimport {RunningContext} from './AdminPanel'\ninterface HomeProps {\n\n}\n\nconst Home: React.FC<HomeProps> = () => {\n\n        return (<div>\n                <RunningContext.Consumer >\n                    {(value:any) => {\n                        return (\n                        <h3 onClick ={() => value.running()} id=\"home\">Go Home</h3>\n                        )}}\n            \n            </RunningContext.Consumer>\n        </div>);\n}\nexport default Home"],"sourceRoot":""}