{"version":3,"sources":["components/Admin/QuillComponent.tsx","components/Admin/EditType.tsx","components/Admin/Home.tsx"],"names":["QuillToolBar","id","style","width","className","value","toolbarModules","toolbar","EditType","title","date","type","html","img","iframe","upClicked","useState","titleChange","setTitleChange","fileEl","useRef","context","useContext","RunningContext","dater","Date","toISOString","split","dateChange","setDateChange","image","setImage","text","setText","notAnImage","setNotAnImage","fileType","setFileType","getImageCall","setGetImageCall","iframeForm","setIframeForm","upcoming","setUpcoming","options","maxSizeMB","capitalizeFirstLetter","string","charAt","toUpperCase","slice","useEffect","console","log","getImage","e","a","target","files","includes","reader","FileReader","imageCompression","compressedFile","onloadend","previewImage","document","getElementById","src","result","display","readAsDataURL","htmlFor","decodeURIComponent","name","onChange","checked","modules","height","paddingRight","content","alt","color","padding","marginTop","marginBottom","onClick","current","click","ref","preventDefault","axios","post","tbname","then","response","data","headers","optionsImage","Axios","put","running","Promise","all","delete","params","Home","Consumer"],"mappings":"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","file":"static/js/13.ee1ba48b.chunk.js","sourcesContent":["import React from 'react'\n\nimport 'react-quill/dist/quill.snow.css';\ninterface QuillToolBarProps {\n  \n}\n\n\nconst QuillToolBar: React.FC<QuillToolBarProps> = ({}) => {\n        return (<div id=\"standalone-container\">\n        <div id=\"toolbar-container\"  style={{width:'95%'}}>\n          <span className=\"ql-formats\">\n            <select className=\"ql-size\"></select>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-bold\"></button>\n            <button className=\"ql-italic\"></button>\n            <button className=\"ql-underline\"></button>\n            <button className=\"ql-strike\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <select className=\"ql-color\"></select>\n            <select className=\"ql-background\"></select>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-script\" value=\"sub\"></button>\n            <button className=\"ql-script\" value=\"super\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-header\" value=\"1\"></button>\n            <button className=\"ql-header\" value=\"2\"></button>\n            <button className=\"ql-blockquote\"></button>\n            <button className=\"ql-code-block\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-list\" value=\"ordered\"></button>\n            <button className=\"ql-list\" value=\"bullet\"></button>\n            <button className=\"ql-indent\" value=\"-1\"></button>\n            <button className=\"ql-indent\" value=\"+1\"></button>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-direction\" value=\"rtl\"></button>\n            <select className=\"ql-align\"></select>\n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-link\"></button>\n            <button className=\"ql-image\"></button>\n      \n          </span>\n          <span className=\"ql-formats\">\n            <button className=\"ql-clean\"></button>\n          </span>\n        </div>\n        <div id=\"editor-container\"></div>\n        \n      </div>);\n}\nexport default QuillToolBar","import React, {useState, useContext, useRef, useEffect} from 'react'\nimport imageCompression from 'browser-image-compression';\nimport axios from '../../axInstance'\nimport Axios from 'axios'\nimport Home from './Home'\nimport {RunningContext} from './AdminPanel'\nimport ReactQuill from 'react-quill';\nimport QuillComponent from './QuillComponent'\ninterface EditTypeProps {\n    title: string\n    id:number\n    date:string\n    type:string\n    html:string\n    img: string\n    iframe: string\n    upClicked?:boolean\n}\nconst toolbarModules =  {\n    toolbar:'#toolbar-container'\n  }\n  \nconst EditType:React.FC<EditTypeProps> = ({title, id, date, type, html, img, iframe, upClicked}) => {\n    const [titleChange, setTitleChange] = useState(title)\n\n    const fileEl = useRef<any>('')\n    const context = useContext(RunningContext)\n    const dater = new Date(date).toISOString().split('T')[0]\n    const [dateChange, setDateChange] = useState(dater)\n    const [image, setImage] = useState<any>(img)\n    const [text, setText] = useState(html)\n    const [notAnImage, setNotAnImage] = useState('')\n        const [fileType, setFileType] = useState('')\n        const [getImageCall, setGetImageCall] = useState(0)\n        const [iframeForm, setIframeForm] = useState<string>(iframe)\n        const [upcoming, setUpcoming] = useState(upClicked)\n\n    const options = {\n        maxSizeMB:0.1\n    }\n    function capitalizeFirstLetter(string:string) {\n        return string.charAt(0).toUpperCase() + string.slice(1, -1);\n      }\n\n      const clickButton = () => {\n          fileEl.current.click()\n      }\n\n      useEffect(() => {\n        console.log(upClicked)\n      },[])\n      \n      const formSubmit = (e:any) => {\n        e.preventDefault()\n        console.log(image)\n        \n\n        \n        axios.post('/edit', {\n            title:titleChange, \n            iframe:iframeForm !== \"\"?iframeForm.split(\"?\")[0] + \"?embedded=true\":\"\",\n            date:dateChange,\n            tbname:type, \n            id:id,\n            upcoming:upcoming\n            \n\n        }).then((response) => {\n           console.log(response.data)\n            const options = {\n                headers: {\n                  \"Content-type\":\"text/html; charset=UTF-8\"\n                }\n                \n              }\n              const optionsImage = {\n                headers: {\n                  \"Content-type\":fileType\n                }\n                \n              }\n              if (getImageCall === 0) {\n                Axios.put(response.data[0]?.text, text, options).then(() => {\n                    context.running()\n                })\n              }\n              else {\n                Promise.all([Axios.put(response.data[0]?.text, text, options), Axios.put(response.data[1]?.image, image, optionsImage)]).then(() => {\n                    context.running()\n                  })\n              }\n             \n        \n        \n      })\n    }\n\n      const deletePost = () => {\n        axios.delete('/post', {\n            params:{\n                id:id, \n                type:type,\n                title:title\n            }\n      })\n      context.running()\n    }\n\n    const getImage = async (e:any, id:string) => {\n      if (!e.target.files[0].type.includes('image')) {\n        setNotAnImage('Your file is not an image.')\n        return\n      }\n      else (setNotAnImage(''))\n        setGetImageCall(getImageCall  + 1 )\n        var reader = new FileReader();\n        setFileType(e.target.files[0].type)\n        const compressedFile = await imageCompression(e.target.files[0], options)\n       await setImage(compressedFile);\n       await console.log(compressedFile)\n        reader.onloadend = (e) => {\n            let previewImage = document.getElementById(id) as HTMLImageElement\n            previewImage.src = reader.result as string \n            previewImage.style.display = 'block'\n            \n            \n        }\n        reader.readAsDataURL(e.target.files[0])\n}   \n\n        return (<div>\n            <Home />\n            <div id=\"type\" >\n                <label htmlFor=\"title\"><h2>Title</h2></label>\n                <input type=\"text\" value={decodeURIComponent(titleChange)} name=\"title\" id=\"title\" onChange={(e) => {setTitleChange(e.target.value);}}/>\n                <label htmlFor=\"date\"><h2>Date</h2></label>\n                <input type=\"date\" value={dateChange} name=\"date\" id=\"date\" onChange={(e) => {setDateChange(e.target.value);}}/>\n                {type===\"events\"?<div><h3>Put the form link here. (If it Exists)</h3>\n                <input type=\"text\" name=\"iframe\" value={iframeForm} onChange={(e) => setIframeForm(e.target.value)}/>\n                <div><h2>Check the box if it's an upcoming event.</h2><input type=\"checkbox\" name=\"upcoming\" checked={upcoming} onChange={(e) => {setUpcoming(e.target.checked);console.log(e.target.checked)}} /></div></div>:null}\n                \n                <label htmlFor=\"details\"><h2>Edit Your Post Here</h2></label>\n                <QuillComponent />\n                <ReactQuill value={text} modules={toolbarModules} style={{width:\"95%\", height:\"100%\", paddingRight:\"12px\"}}   onChange={(content) => setText(content)}/>\n                <br/><img src={image} alt=\"preview\" id=\"detail-photo\"/>\n                <div><button style={{color: 'black', width:'fit-content', padding:\"10px\", marginTop:\"20px\", marginBottom:\"20px\"}} onClick={clickButton}>Change Image</button><br /></div>\n                <input type=\"file\" name=\"image\" style={{display:'none'}}id=\"image\" onChange={(e) => getImage(e, 'detail-photo')} ref={fileEl}/>\n                <h3>{notAnImage }</h3>\n                <input onClick={formSubmit} type=\"submit\" id=\"submit\" value={`Edit ${capitalizeFirstLetter(type)}`}/>\n               \n            </div>\n            <div className=\"button-delete\">\n            <button id=\"delete\" onClick={() => deletePost()}>Delete {capitalizeFirstLetter(type)}</button>\n            </div>\n           \n            \n        </div>);\n}\nexport default EditType","import React from 'react'\nimport {RunningContext} from './AdminPanel'\ninterface HomeProps {\n\n}\n\nconst Home: React.FC<HomeProps> = () => {\n\n        return (<div>\n                <RunningContext.Consumer >\n                    {(value:any) => {\n                        return (\n                        <h3 onClick ={() => value.running()} id=\"home\">Go Home</h3>\n                        )}}\n            \n            </RunningContext.Consumer>\n        </div>);\n}\nexport default Home"],"sourceRoot":""}